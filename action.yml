name: 'Python Package CodeArtifact Deployment'
description: 'Build and deploy Python packages to AWS CodeArtifact'
author: 'delivops'
branding:
  icon: 'package'
  color: 'orange'

inputs:
  lib-name:
    description: 'Name of the library to be deployed'
    required: true
  lib-path:
    description: 'Path to the library directory'
    required: true
    default: 'libs/${{ inputs.lib-name }}'
  lib-version:
    description: 'Version of the library to be deployed'
    required: true
  python-version:
    description: 'Python version to use'
    required: true
  aws-region:
    description: 'AWS Region'
    required: true
  aws-account-id:
    description: 'AWS Account ID'
    required: true
  aws-role-name:
    description: 'AWS IAM Role to assume'
    required: true
    default: 'github_libs'
  codeartifact-domain:
    description: 'AWS CodeArtifact domain'
    required: true
  codeartifact-repository:
    description: 'AWS CodeArtifact repository'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
      
    - name: Install dependencies
      shell: bash
      working-directory: ${{ inputs.lib-path }}
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine build
    
    - name: Build the package
      shell: bash
      working-directory: ${{ inputs.lib-path }}
      run: |
        VERSION=${{ inputs.lib-version }} python -m build

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: "arn:aws:iam::${{ inputs.aws-account-id }}:role/${{ inputs.aws-role-name }}"
        aws-region: ${{ inputs.aws-region }}

    - name: Upload to CodeArtifact
      shell: bash
      working-directory: ${{ inputs.lib-path }}
      run: |
        export TWINE_USERNAME=aws
        export TWINE_PASSWORD=`aws codeartifact get-authorization-token --domain ${{ inputs.codeartifact-domain }} --domain-owner ${{ inputs.aws-account-id }} --query authorizationToken --output text`
        export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain ${{ inputs.codeartifact-domain }} --domain-owner ${{ inputs.aws-account-id }} --repository ${{ inputs.codeartifact-repository }} --format pypi --query repositoryEndpoint --output text`
        twine upload --repository codeartifact dist/* --verbose
